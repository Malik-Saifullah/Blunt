@use 'sass:math';

$padding-max: 20;
$padding-increment: 0.1;
$padding-start: 0;

@mixin paddingGen($prefix, $number, $decimal, $val) {
  @if($decimal > 0) {
    .#{$prefix}pt-#{$number}p#{$decimal} { padding-top: #{$val}vh; }
    .#{$prefix}pb-#{$number}p#{$decimal} { padding-bottom: #{$val}vh; }
    .#{$prefix}pl-#{$number}p#{$decimal} { padding-left: #{$val}vw; }
    .#{$prefix}pr-#{$number}p#{$decimal} { padding-right: #{$val}vw; }
    .#{$prefix}p-#{$number}p#{$decimal} { padding: #{$val}rem; }
  } @else {
    .#{$prefix}pt-#{$number} { padding-top: #{$val}vh; }
    .#{$prefix}pb-#{$number} { padding-bottom: #{$val}vh; }
    .#{$prefix}pl-#{$number} { padding-left: #{$val}vw; }
    .#{$prefix}pr-#{$number} { padding-right: #{$val}vw; }
    .#{$prefix}p-#{$number} { padding: #{$val}rem; }
  }
}

@mixin padding($prefix) {
  @while($padding-start <= $padding-max) {
    $decimal: $padding-start * 10 % 10;
    $number: math.floor($padding-start);

    @include paddingGen($prefix, $number, $decimal, $padding-start);
    $padding-start: $padding-start + $padding-increment;
  }
}
